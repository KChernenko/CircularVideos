apply plugin: 'com.android.application'
apply from: '../config/quality/quality.gradle'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'me.tatarka.retrolambda'

final compileSdkVer = 24
final buildToolsVer = '24.0.2'
final minSdkVer = 19
final targetSdkVer = 24
final supportLibsVer = '24.2.1'

//noinspection GroovyMissingReturnStatement,GroovyMissingReturnStatement
android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        applicationId "me.bitfrom.circularvideos"
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode 1
        versionName "1.0"

        // Make generated apks contain version name and code.
        archivesBaseName = "app-${versionName}-${versionCode}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            def Properties rProps = new Properties()
            def rpFile = file('release_signing.properties')
            if (rpFile.canRead()){
                rProps.load(new FileInputStream(rpFile))

                if (rProps != null && rProps.containsKey('STORE_FILE') && rProps.containsKey('STORE_PASSWORD') &&
                        rProps.containsKey('KEY_ALIAS') && rProps.containsKey('KEY_PASSWORD')) {
                    storeFile = file(rProps['STORE_FILE'])
                    storePassword = rProps['STORE_PASSWORD']
                    keyAlias = rProps['KEY_ALIAS']
                    keyPassword = rProps['KEY_PASSWORD']
                } else {
                    throw new GradleException("release_signing.properties found but some entries are missing")
                }
            } else {
                throw new GradleException("release_signing.properties not found")
            }
        }

        debug {
            def Properties dProps = new Properties()
            def dpFile = file('debug_signing.properties')
            if (dpFile.canRead()){
                dProps.load(new FileInputStream(dpFile))

                if (dProps != null && dProps.containsKey('STORE_FILE') && dProps.containsKey('STORE_PASSWORD') &&
                        dProps.containsKey('KEY_ALIAS') && dProps.containsKey('KEY_PASSWORD')) {
                    storeFile = file(dProps['STORE_FILE'])
                    storePassword = dProps['STORE_PASSWORD']
                    keyAlias = dProps['KEY_ALIAS']
                    keyPassword = dProps['KEY_PASSWORD']
                } else {
                    throw new GradleException("debug_signing.properties found but some entries are missing")
                }
            } else {
                throw new GradleException("debug_signing.properties not found")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.betaDistributionReleaseNotesFilePath =
                    file('../crashlytics_release_notes.txt').absolutePath
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            versionNameSuffix ".dev"
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        maxProcessCount 4
        javaMaxHeapSize "4g"
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    //noinspection GroovyMissingReturnStatement
    lintOptions {
        quiet true
        abortOnError true
        htmlReport true
        xmlReport true
        fatal 'NewApi'
        disable 'InvalidPackage'
    }

    //noinspection GroovyMissingReturnStatement
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    //noinspection GroovyAssignabilityCheck
    configurations.all {
        //noinspection GroovyAssignabilityCheck
        resolutionStrategy.force "com.android.support:support-annotations:$supportLibsVer"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //Dagger
    final daggerVer = '2.7'
    final javaxInject = '1'
    final javaxAnnotationApi = '1.2'
    final javaPoet = '1.7.0'

    //RxJava
    final rxJavaVer = '1.2.1'
    final rxAndroidVer = '1.2.1'

    //Networking
    final okHttpVer = '3.4.1'
    final retrofitVer = '2.1.0'
    final loganSquareVer = '1.3.7'
    final loganSquareConverterVer = '1.4.1'

    //Database
    final sqlBriteVer = '0.7.0'
    final autoValueParVer = '0.2.5'

    //Image-side
    final glideVer = '3.7.0'

    //UI
    final butterKnifeVer = '8.4.0'

    //Other
    final permissionsDispatcherVer = '2.1.3'
    final eventBusVer = '3.0.0'
    final exoPlayer = 'r1.5.12'
    final protobufNano = '3.0.0-alpha-7'

    //Developer
    final leakCanaryVer = '1.5'
    final timberVer = '4.3.1'
    final stethoVer = '1.4.1'

    //Tests
    final junit = '4.8+'
    final robolectric = '3.1.2'
    final mockito = '2.0.42-beta'
    final hamcrest = '1.3'
    final powerMock = '1.6.5'
    final assertJ = '2.5.0'
    // Android JUnit Runner
    final testRunner = '0.5'
    // JUnit4 Rules
    final testRules = '0.5'
    //UI
    final espresso = '2.2.2'

    compile "com.android.support:appcompat-v7:$supportLibsVer"
    compile "com.android.support:support-v4:$supportLibsVer"
    compile "com.android.support:support-v13:$supportLibsVer"
    compile "com.android.support:support-annotations:$supportLibsVer"
    compile "com.android.support:design:$supportLibsVer"
    compile "com.android.support:percent:$supportLibsVer"

    compile project(':vr-libraries:base')
    compile project(':vr-libraries:common')
    compile project(':vr-libraries:commonwidget')
    compile project(':vr-libraries:videowidget')
    compile project(':vr-libraries:audio')

    apt "com.squareup:javapoet:$javaPoet"
    compile "com.google.dagger:dagger:$daggerVer"
    compile "javax.inject:javax.inject:$javaxInject"
    compile "javax.annotation:javax.annotation-api:$javaxAnnotationApi"
    def daggerCompiler = "com.google.dagger:dagger-compiler:$daggerVer"
    apt daggerCompiler
    testApt daggerCompiler
    androidTestApt daggerCompiler

    compile "io.reactivex:rxjava:$rxJavaVer"
    compile "io.reactivex:rxandroid:$rxAndroidVer"

    compile "com.squareup.okhttp3:okhttp:$okHttpVer"
    compile "com.squareup.okhttp3:logging-interceptor:$okHttpVer"
    compile "com.squareup.retrofit2:retrofit:$retrofitVer"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVer"
    apt "com.bluelinelabs:logansquare-compiler:$loganSquareVer"
    compile "com.bluelinelabs:logansquare:$loganSquareVer"
    compile "com.github.aurae.retrofit2:converter-logansquare:$loganSquareConverterVer"

    compile "com.squareup.sqlbrite:sqlbrite:$sqlBriteVer"
    apt "com.ryanharter.auto.value:auto-value-parcel:$autoValueParVer"
    provided "com.ryanharter.auto.value:auto-value-parcel:$autoValueParVer"

    compile "com.github.bumptech.glide:glide:$glideVer"

    compile "com.jakewharton:butterknife:$butterKnifeVer"
    apt "com.jakewharton:butterknife-compiler:$butterKnifeVer"

    compile "com.github.hotchemi:permissionsdispatcher:$permissionsDispatcherVer"
    apt "com.github.hotchemi:permissionsdispatcher-processor:$permissionsDispatcherVer"
    compile "org.greenrobot:eventbus:$eventBusVer"

    compile "com.google.android.exoplayer:exoplayer:$exoPlayer"
    compile "com.google.protobuf.nano:protobuf-javanano:$protobufNano"

    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVer"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVer"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVer"
    compile "com.jakewharton.timber:timber:$timberVer"
    compile "com.facebook.stetho:stetho:$stethoVer"
    compile "com.facebook.stetho:stetho-okhttp3:$stethoVer"

    testCompile "junit:junit:$junit"
    testCompile "org.robolectric:robolectric:$robolectric"
    testCompile ("org.mockito:mockito-core:$mockito") {
        exclude group: 'hamcrest', module: 'hamcrest'
    }
    testCompile "org.hamcrest:hamcrest-all:$hamcrest"
    testCompile "org.powermock:powermock-module-junit4:$powerMock"
    testCompile ("org.powermock:powermock-api-support:$powerMock") {
        exclude module: 'hamcrest'
        exclude module: 'objenesis'
    }
    testCompile "org.assertj:assertj-core:$assertJ"
    androidTestCompile ("org.mockito:mockito-core:$mockito") {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    androidTestCompile "com.android.support.test:runner:$testRunner"
    androidTestCompile "com.android.support.test:rules:$testRules"
    androidTestCompile "com.android.support.test.espresso:espresso-core:$espresso"
    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:$espresso") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$espresso"
    androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:$espresso"
}